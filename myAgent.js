// Generated by CoffeeScript 1.7.1
(function() {
  var directionsEnum, doPassCards, doPlayCard, followSuit, game, isHeartsBroken, isLeadingTrick, noHearts, noPoints, onlyTwoClubs, playableCards, score, und;

  game = require('./game');

  und = require('underscore');

  directionsEnum = {
    north: 1,
    east: 2,
    south: 3,
    west: 4
  };

  score = {
    north: 0,
    east: 0,
    south: 0,
    west: 0
  };

  isLeadingTrick = function(trick) {
    return trick.played.length === 0;
  };

  isHeartsBroken = function(trick) {
    return trick.round.tricks.some(function(trick) {
      return trick.played.some(function(card) {
        return card.suit === game.Suit.HEARTS;
      });
    });
  };

  onlyTwoClubs = function(cards) {
    return und.select(cards, function(card) {
      return card.suit === game.Suit.CLUBS && card.rank === game.Rank.TWO;
    });
  };

  noHearts = function(cards) {
    return und.reject(cards, function(card) {
      return card.suit === game.Suit.HEARTS;
    });
  };

  noPoints = function(cards) {
    return und.reject(noHearts(cards), function(card) {
      return card.suit === game.Suit.SPADES && card.rank === game.Rank.QUEEN;
    });
  };

  followSuit = function(cards, trick) {
    var matching, suit;
    suit = trick.played[0].suit;
    matching = und.filter(cards, function(card) {
      return card.suit === suit;
    });
    if (matching.length > 0) {
      return matching;
    } else {
      return cards;
    }
  };

  playableCards = function(trick) {
    var validCards;
    validCards = trick.round.held.slice(0);
    if (trick.number === 1 && isLeadingTrick(trick)) {
      validCards = onlyTwoClubs(validCards);
    }
    if (trick.number === 1) {
      validCards = noPoints(validCards);
    }
    if (isLeadingTrick(trick) && !isHeartsBroken(trick) && noHearts(trick.round.held).length > 0) {
      validCards = noHearts(validCards);
    }
    if (!isLeadingTrick(trick)) {
      validCards = followSuit(validCards, trick);
    }
    trick.log("Valid cards:", validCards);
    return validCards;
  };

  doPassCards = function(round) {
    var cardsToPass;
    cardsToPass = round.dealt.slice(0, 3);
    round.log("Passing cards", cardsToPass);
    return cardsToPass;
  };

  doPlayCard = function(trick) {
    var cardToPlay, key, leadingEdge, sortable, thisGame;
    thisGame = trick.round.game;
    sortable = [];
    for (key in thisGame.score) {
      sortable.push([key, thisGame.score[key]]);
    }
    sortable.sort(function(a, b) {
      return a[1] - b[1];
    });
    leadingEdge = sortable[0][1] - sortable[1][1];
    trick.log("Current trick:", trick.played);
    cardToPlay = playableCards(trick)[0];
    trick.log("Playing card:", cardToPlay);
    return cardToPlay;
  };

  game.play(doPassCards, doPlayCard);

}).call(this);
