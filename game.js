// Generated by CoffeeScript 1.7.1
(function() {
  var Game, Hearts, Round, Trick, thrift, types,
    __slice = [].slice;

  thrift = require('thrift');

  Hearts = require('./lib/Hearts');

  types = require('./lib/hearts_types');

  Trick = (function() {
    function Trick(number, round, options) {
      this.number = number;
      this.round = round;
      this.options = options;
      this.leader = null;
      this.played = [];
    }

    Trick.prototype.run = function(callback) {
      this.log("Starting trick");
      return this.options.client.get_trick(this.options.ticket, (function(_this) {
        return function(err, trick) {
          var cardToPlay;
          if (err) {
            throw err;
          }
          _this.leader = trick.leader;
          _this.played = trick.played;
          cardToPlay = _this.options.playCardFn(_this);
          _this.round.held.splice(_this.round.held.indexOf(cardToPlay), 1);
          return _this.options.client.play_card(_this.options.ticket, cardToPlay, function(err, trickResult) {
            if (err) {
              throw err;
            }
            _this.log("trick: result", trickResult);
            _this.played = trickResult.played;
            _this.round.game.updateScore(trickResult);
            _this.log("trick: new score", _this.round.game.score);
            return callback();
          });
        };
      })(this));
    };

    Trick.prototype.log = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.round).log.apply(_ref, ["T:" + this.number].concat(__slice.call(args)));
    };

    return Trick;

  })();

  Round = (function() {
    function Round(number, game, options) {
      this.number = number;
      this.game = game;
      this.options = options;
      this.tricks = [];
      this.dealt = [];
      this.passed = [];
      this.received = [];
      this.held = [];
    }

    Round.prototype.createTrick = function() {
      var trick, trickNumber;
      trickNumber = this.tricks.length + 1;
      trick = new Trick(trickNumber, this, this.options);
      this.tricks.push(trick);
      return trick;
    };

    Round.prototype.run = function(callback) {
      this.log("Starting round");
      return this.options.client.get_hand(this.options.ticket, (function(_this) {
        return function(err, hand) {
          if (err) {
            throw err;
          }
          _this.log("You were dealt:", hand);
          _this.dealt = hand.slice(0);
          _this.held = hand.slice(0);
          return _this.passCards(function() {
            return _this.playTrick(callback);
          });
        };
      })(this));
    };

    Round.prototype.passCards = function(callback) {
      var cardToPass, _i, _len, _ref;
      if (this.number % 4 === 0) {
        this.log("Not passing cards");
        return callback();
      } else {
        this.log("About to pass cards");
        this.passed = this.options.passCardsFn(this);
        _ref = this.passed;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cardToPass = _ref[_i];
          this.held.splice(this.held.indexOf(cardToPass), 1);
        }
        return this.options.client.pass_cards(this.options.ticket, this.passed, (function(_this) {
          return function(err, receivedCards) {
            if (err) {
              throw err;
            }
            _this.received = receivedCards;
            _this.log("Received cards:", _this.received);
            _this.held = _this.held.concat(_this.received);
            return callback();
          };
        })(this));
      }
    };

    Round.prototype.playTrick = function(callback) {
      var trick;
      trick = this.createTrick();
      return trick.run((function(_this) {
        return function() {
          if (_this.tricks.length >= 13) {
            return callback();
          } else {
            return _this.playTrick(callback);
          }
        };
      })(this));
    };

    Round.prototype.log = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this.game).log.apply(_ref, ["R:" + this.number].concat(__slice.call(args)));
    };

    return Round;

  })();

  Game = (function() {
    function Game(info, options) {
      this.info = info;
      this.options = options;
      this.rounds = [];
      this.score = {
        north: 0,
        east: 0,
        south: 0,
        west: 0
      };
      this.numToDirection = {
        0: "north",
        1: "east",
        2: "south",
        3: "west"
      };
      this.directionToNum = {
        north: 0,
        east: 1,
        south: 2,
        west: 3
      };
    }

    Game.prototype.createRound = function() {
      var round, roundNumber;
      roundNumber = this.rounds.length + 1;
      round = new Round(roundNumber, this, this.options);
      this.rounds.push(round);
      return round;
    };

    Game.prototype.run = function(callback) {
      var round;
      this.log("Starting game");
      round = this.createRound();
      return round.run((function(_this) {
        return function() {
          return _this.options.client.get_round_result(_this.options.ticket, function(err, roundResult) {
            if (err) {
              throw err;
            }
            _this.log("round result:", roundResult);
            if (roundResult.status !== types.GameStatus.NEXT_ROUND) {
              return callback();
            } else {
              return _this.run(callback);
            }
          });
        };
      })(this));
    };

    Game.prototype.updateScore = function(trick) {
      var card, highestCard, i, leaderAsNum, pointsForTrick, suit, winnerAsDirection, winningDirectionAsNum, _i, _len, _ref;
      suit = trick.played[0].suit;
      leaderAsNum = this.directionToNum[trick.leader];
      highestCard = trick.played[0];
      winningDirectionAsNum = leaderAsNum;
      pointsForTrick = 0;
      _ref = trick.played;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        card = _ref[i];
        if (card.suit === types.Suit.HEARTS) {
          pointsForTrick++;
        }
        if (card.suit === types.Suit.SPADES && card.rank === types.Rank.QUEEN) {
          pointsForTrick += 13;
        }
        if (card.rank > highestCard.rank && card.suit === suit) {
          highestCard = card;
          winningDirectionAsNum = (i + leaderAsNum) % 4;
        }
      }
      winnerAsDirection = this.numToDirection[winningDirectionAsNum];
      if (typeof winnerAsDirection === 'undefined') {
        debugger;
      }
      this.score[winnerAsDirection] += pointsForTrick;
      return this.score;
    };

    Game.prototype.log = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return console.log.apply(console, ["P:" + this.info.position].concat(__slice.call(args)));
    };

    return Game;

  })();

  exports.play = function(passCardsFn, playCardFn) {
    var client, connection, host, port, request, transport;
    host = process.env.AVA_HOST || '127.0.0.1';
    port = process.env.AVA_PORT || 4001;
    transport = thrift.TFramedTransport;
    connection = thrift.createConnection(host, port, {
      transport: transport
    });
    client = thrift.createClient(Hearts, connection);
    request = new types.EntryRequest();
    console.log("Entering arena", request);
    return client.enter_arena(request, (function(_this) {
      return function(err, response) {
        var ticket;
        if (err) {
          throw err;
        }
        ticket = response.ticket;
        if (ticket) {
          console.log("playing");
          return client.get_game_info(ticket, function(err, gameInfo) {
            var game;
            if (err) {
              throw err;
            }
            console.log("game info:", gameInfo);
            game = new Game(gameInfo, {
              ticket: ticket,
              client: client,
              passCardsFn: passCardsFn,
              playCardFn: playCardFn
            });
            return game.run(function() {
              console.log("Game is over");
              return client.get_game_result(ticket, function(err, gameResult) {
                if (err) {
                  throw err;
                }
                console.log("game result:", gameResult);
                return connection.end();
              });
            });
          });
        } else {
          console.log("No ticket");
          return connection.end();
        }
      };
    })(this));
  };

  exports.Suit = types.Suit;

  exports.Rank = types.Rank;

  exports.Card = types.Card;

}).call(this);
